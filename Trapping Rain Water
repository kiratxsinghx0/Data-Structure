# //space complexity Olog(n)
# //time complexity Olog(n)

var trap = function(height) {
    if (height.length < 3) return 0;

    let waterSum = 0;
    let maxLeft = Array(height.length).fill(0);
    let maxRight = Array(height.length).fill(0);

    maxLeft[0] = height[0];
    for (let i = 1; i < height.length; i++) {
        maxLeft[i] = Math.max(maxLeft[i - 1], height[i]);
    }

    maxRight[height.length - 1] = height[height.length - 1];
    for (let i = height.length - 2; i >= 0; i--) {
        maxRight[i] = Math.max(maxRight[i + 1], height[i]);
    }

    for (let i = 1; i < height.length - 1; i++) {
        let minHeight = Math.min(maxLeft[i], maxRight[i]);
        if (minHeight > height[i]) {
            waterSum += minHeight - height[i];
        }
    }

    return waterSum;
};



# //space complexity Olog(1)
# //time complexity Olog(n)



var trap = function (height) {
    if (height.length < 3) return 0;
    let waterSum = 0;
    let i = 1;
    let left = 1;
    let right = height.length - 2;
    let leftMax = height[0];
    let rightMax = height[height.length - 1];
    while (i < height.length - 1) {
        if (leftMax > rightMax) {
        if(Math.min(leftMax,rightMax) - height[right] > 0) waterSum += Math.min(leftMax,rightMax) - height[right];
            if(height[right] > rightMax)rightMax = height[right] ;
            console.log("in the right right shifted", right)
            right--;
        }
        else {
        if(Math.min(leftMax,rightMax) - height[left] > 0) waterSum += Math.min(leftMax,rightMax) - height[left];
            if(height[left] > leftMax)leftMax = height[left] ;
            console.log("in the left left shifted", left)
            left++;
        }
        i++;
    }
    return waterSum;
};
